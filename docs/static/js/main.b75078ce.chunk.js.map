{"version":3,"sources":["google.js","App.js","config.js","index.js"],"names":["parseDate","dateStr","arr","split","y","parseInt","m","d","date","Date","setFullYear","setMonth","setDate","ex","window","listRows","gapi","client","sheets","spreadsheets","values","get","spreadsheetId","range","then","response","result","console","log","arrayOfWords","length","i","row","wordObject","meaning","pronounced","korean","timestamp","push","currentWords","wordsReadyCallback","error","message","spanStyle","location","origin","marginRight","padding","cursor","background","borderRadius","border","App","useState","strings","setStrings","englishFirst","setEnglishFirst","sortingOrder","setSortingOrder","visibleIndexes","setVisibleIndexes","useEffect","getHiddenSpan","targetIdx","stringInside","isVisible","className","onClick","idx","newVisible","includes","filter","hiddenClick","style","sort","str1","str2","date1","date2","getTime","id","textAlign","value","onChange","e","numberValue","currentTarget","marginBottom","marginLeft","display","map","obj","equalsStyle","visible","key","whiteSpace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b75078ce.chunk.js","sourcesContent":["/**\r\n * Print the names and majors of students in a sample spreadsheet:\r\n * https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit\r\n *\r\n * real spreadsheet: https://docs.google.com/spreadsheets/d/1nFb3jDXKOSw-aJjMZppVlWo62oFLpXM21wTCkp-Xdow/edit#gid=0\r\n *\r\n */\r\nconst spreadsheetId = '1nFb3jDXKOSw-aJjMZppVlWo62oFLpXM21wTCkp-Xdow'\r\n\r\nconst parseDate = dateStr => {\r\n  try {\r\n    let arr = dateStr.split('-')\r\n    let y = parseInt(arr[0])\r\n    let m = parseInt(arr[1]) - 1\r\n    let d = parseInt(arr[2])\r\n    let date = new Date()\r\n    date.setFullYear(y)\r\n    date.setMonth(m)\r\n    date.setDate(d)\r\n    return date\r\n  } catch (ex) {\r\n    return new Date()\r\n  }\r\n}\r\n\r\nwindow.listRows = () => {\r\n  let gapi = window.gapi\r\n  gapi.client.sheets.spreadsheets.values\r\n    .get({\r\n      spreadsheetId: spreadsheetId,\r\n      range: 'WORDS!A2:D'\r\n    })\r\n    .then(\r\n      function(response) {\r\n        var range = response.result\r\n        console.log(range)\r\n        let arrayOfWords = []\r\n\r\n        if (range.values.length > 0) {\r\n          for (let i = 0; i < range.values.length; i++) {\r\n            var row = range.values[i]\r\n            let wordObject = {\r\n              meaning: row[0],\r\n              pronounced: row[1],\r\n              korean: row[2],\r\n              timestamp: parseDate(row[3])\r\n            }\r\n            arrayOfWords.push(wordObject)\r\n          }\r\n        }\r\n        window.currentWords = arrayOfWords\r\n        window.wordsReadyCallback(arrayOfWords)\r\n      },\r\n      function(response) {\r\n        console.log(response.result.error.message)\r\n      }\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport config from './config.js'\nimport { submitWord, deleteWord } from './http.js'\nimport 'google.js'\n\nlet spanStyle = {\n  marginRight: '10px',\n  padding: '3px 10px 3px 10px',\n  cursor: 'pointer',\n  background: '#dedede',\n  borderRadius: '4px',\n  border: '1px solid #c9c9c9'\n}\n\nfunction App() {\n  let [strings, setStrings] = useState([])\n  let [englishFirst, setEnglishFirst] = useState(1)\n  let [sortingOrder, setSortingOrder] = useState(1)\n  let [visibleIndexes, setVisibleIndexes] = useState([])\n\n  //fetch strings\n  useEffect(() => {\n    //window.currentWords holds all\n    window.wordsReadyCallback = arrayOfWords => {\n      console.log(arrayOfWords)\n      setStrings(arrayOfWords)\n    }\n  }, [])\n\n  //what happens when you press a hidden word\n  const hiddenClick = idx => {\n    idx = parseInt(idx)\n    let newVisible = [...visibleIndexes]\n    if (visibleIndexes.includes(idx)) {\n      newVisible = newVisible.filter(i => {\n        return i !== idx\n      })\n    } else {\n      newVisible.push(idx)\n    }\n    setVisibleIndexes(newVisible)\n  }\n\n  //returns JSX of black box word\n  const getHiddenSpan = (targetIdx, stringInside, isVisible) => {\n    return (\n      <span\n        className={'potential-hidden ' + !isVisible ? 'noselect' : ''}\n        onClick={() => hiddenClick(targetIdx)}\n        style={{ ...spanStyle, ...(isVisible ? {} : { background: 'black' }) }}\n      >\n        {stringInside}\n      </span>\n    )\n  }\n\n  strings.sort((str1, str2) => {\n    let date1 = new Date(str1.timestamp)\n    let date2 = new Date(str2.timestamp)\n    if (sortingOrder === 1) {\n      return date1.getTime() - date2.getTime()\n    } else {\n      return date2.getTime() - date1.getTime()\n    }\n  })\n\n  return (\n    <div id='main' style={{ textAlign: 'center' }}>\n      <div style={{ padding: '20px' }}>\n        <select\n          value={englishFirst}\n          onChange={e => {\n            const numberValue = parseInt(e.currentTarget.value)\n            setEnglishFirst(numberValue)\n          }}\n          style={{ marginBottom: '20px' }}\n        >\n          <option value={1}>English first</option>\n          <option value={0}>Korean first</option>\n        </select>\n\n        <select\n          value={sortingOrder}\n          onChange={e => {\n            const numberValue = parseInt(e.currentTarget.value)\n            setSortingOrder(numberValue)\n          }}\n          style={{ marginLeft: '10px', marginBottom: '20px' }}\n        >\n          <option value={1}>Newest</option>\n          <option value={0}>Oldest</option>\n        </select>\n      </div>\n      <div className='container' style={{ textAlign: 'left', display: 'inline-block', padding: '0px 10px 0px 10px' }}>\n        {strings.map((obj, i) => {\n          const equalsStyle = {\n            marginRight: '10px'\n          }\n          const visible = visibleIndexes.includes(i)\n\n          if (englishFirst === 1) {\n            return (\n              <div key={'line' + i} style={{ padding: '8px', whiteSpace: 'nowrap' }}>\n                <span style={{ ...spanStyle }}>{obj.meaning}</span>\n                <span style={{ ...equalsStyle }}>=</span>\n                {getHiddenSpan(i, obj.pronounced, visible)}\n                <span style={{ ...equalsStyle }}>=</span>\n                {getHiddenSpan(i, obj.korean, visible)}\n              </div>\n            )\n          } else {\n            return (\n              <div key={'line' + i} style={{ padding: '8px', whiteSpace: 'nowrap' }}>\n                <span style={{ ...spanStyle }}>{obj.korean}</span>\n                <span style={{ ...equalsStyle }}>=</span>\n                {getHiddenSpan(i, obj.pronounced, visible)}\n                <span style={{ ...equalsStyle }}>=</span>\n                {getHiddenSpan(i, obj.meaning, visible)}\n              </div>\n            )\n          }\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","export default {\r\n  apiURL: window.location.origin\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}